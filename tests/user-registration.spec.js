import { test, expect } from '@playwright/test'
import HomePage from '../src/pageObjects/HomePage/HomePage'
import {USERS} from '../src/data/users'
import SettingsPage from '../src/pageObjects/SettingsPage/SettingsPage'

test.describe("User registration", ()=> {
    let signUpPopup
    let garagePage
    let removeAccountPopup

    test.describe("Successful user registration", ()=> {
        test.beforeEach(async ({page})=> {
            const homePage = new HomePage(page)
            await homePage.navigate()
            signUpPopup = await homePage.openSignUpPopup()
            await signUpPopup.waitLoaded()
            await expect(signUpPopup.registerBtn).toBeDisabled()
        })

        test('Check that user can be registered with minimal allowed name, last name and password length', async ({page})=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_MINIMAL_ALLOWED_CREDENTIALS_LENGTH)
            await expect(signUpPopup.registerBtn).toBeEnabled()
            garagePage = await signUpPopup.saveNewUser()
            await expect(page).toHaveURL(garagePage.garagePageUrl)
        })

        test('Check that user can be registered with maximal allowed name, last name and password length', async ({page})=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_MAXIMAL_ALLOWED_CREDENTIALS_LENGTH)
            await expect(signUpPopup.registerBtn).toBeEnabled()
            garagePage = await signUpPopup.saveNewUser()
            await expect(page).toHaveURL(garagePage.garagePageUrl)
        })

        test.afterEach(async ({page})=> {
            const settingsPage = new SettingsPage(page)  
            await settingsPage.navigate()
            removeAccountPopup = await settingsPage.openRemoveAccountPopup()
            await removeAccountPopup.waitLoaded()
            await removeAccountPopup.removeAccount()
            await expect(page).toHaveURL('')
        })
        })
        test.describe("Unsuccessful user registration", ()=> {
            test.beforeEach(async ({page})=> {
                const homePage = new HomePage(page)
                await homePage.navigate()
                signUpPopup = await homePage.openSignUpPopup()
                await signUpPopup.waitLoaded()
                await expect(signUpPopup.registerBtn).toBeDisabled()
        })

        test('Check that name field is required', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_EMPTY_NAME)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.nameRequiredMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
        })
        test('Check that name can not be less than 2 characters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_NAME_LESS_THAN_2_CHARACTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.nameWrongLengthMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
        })
        test('Check that name can not be more than 20 characters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_NAME_MORE_THAN_20_CHARACTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.nameWrongLengthMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
        })
        test('Check that name can not have spaces', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_NAME_CONTAINS_SPACES)
            await expect(signUpPopup.nameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.nameInvalidMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
        })
        test('Check that name can have only letters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_NAME_CONTAINS_NON_LETTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.nameInvalidMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
        })
        test('Check that last name field is required', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_EMPTY_LAST_NAME)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.lastNameRequiredMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
        })
        test('Check that last name can not be less than 2 characters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_LAST_NAME_LESS_THAN_2_CHARACTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.lastNameWrongLengthMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
        })
        test('Check that last name can not be more than 20 characters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_LAST_NAME_MORE_THAN_20_CHARACTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.lastNameWrongLengthMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
        })
        test('Check that last name can not have spaces', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_LAST_NAME_CONTAINS_SPACES)
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.lastNameInvalidMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that last name can have only letters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_LAST_NAME_CONTAINS_NON_LETTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.lastNameInvalidMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that email field is required', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_EMPTY_EMAIL)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.emailRequiredMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that email field does not accept invalid email', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_INVALID_EMAIL)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.emailInvalidMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that email field does not accept spaces', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_EMAIL_CONTAINS_SPACES)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.emailInvalidMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that password field is required', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_EMPTY_PASSWORD)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.passwordRequiredMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that password can not be less than 8 characters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_PASSWORD_LESS_THAN_8_CHARACTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.passwordWrongLengthMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that password can not be more than 15 characters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_PASSWORD_MORE_THAN_15_CHARACTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.passwordWrongLengthMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that password can not be without integers', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_PASSWORD_CONTAINS_NO_INTEGERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.passwordWrongLengthMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that password can not be without capital letters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_PASSWORD_CONTAINS_NO_CAPITAL_LETTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.passwordWrongLengthMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that password can not be without small letters', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_PASSWORD_CONTAINS_NO_SMALL_LETTERS)
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.passwordWrongLengthMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that Re-enter password field is required', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_EMPTY_REPEATPASSWORD)
            await signUpPopup.repeatPasswordInput.focus()
            await signUpPopup.repeatPasswordInput.blur()
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.repeatPasswordRequiredMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
        test('Check that Re-enter password should match with password', async ()=> {
            await signUpPopup.fillRegistrationForm(USERS.USER_WITH_NOT_MATCHED_REPEATPASSWORD)
            await signUpPopup.repeatPasswordInput.focus()
            await signUpPopup.repeatPasswordInput.blur()
            await expect(signUpPopup.registerBtn).toBeDisabled()
            await expect(signUpPopup.nameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.nameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.lastNameInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.lastNameInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.emailInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.emailInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.passwordInput).not.toHaveClass(/is-invalid/)
            await expect(signUpPopup.passwordInput).not.toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.repeatPasswordInput).toHaveClass(/is-invalid/)
            await expect(signUpPopup.repeatPasswordInput).toHaveCSS('border-color', signUpPopup.invalidInputBorderColor)
            await expect(signUpPopup.validationMessage).toHaveText(signUpPopup.repeatPasswordDoNotMatchMessage)
            await expect(signUpPopup.validationMessage).toBeVisible()
            })
    })
})